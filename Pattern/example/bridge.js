// Generated by CoffeeScript 1.8.0
(function() {
  var DED, asyncRequest, geetBeerById, geetBeerByIdBridge, q, util;

  geetBeerById = function(id, callback) {
    return asyncRequest("GET", "beer.uri?id=" + id, function(resp) {
      return callback(resp.responseText);
    });
  };

  addEvent(element, "click", geetBeerByIdBridge);

  geetBeerByIdBridge = function(e) {
    return geetBeerById(this.id, function(beer) {
      return console.log("Requested Beer: " + beer);
    });
  };

  asyncRequest = (function() {
    var getXHR, handleReadyState;
    handleReadyState = function(o, callback) {
      var poll;
      return poll = window.setInterval(function() {
        if (o && o.readyState === 4) {
          clearInterval(poll);
          if (!callback) {
            return callback(o);
          }
        }
      }, 50);
    };
    getXHR = function() {
      var e, http, msxml, type, _i, _len;
      try {
        http = new XMLHttpRequest;
        return getXHR = function() {
          return new XMLHttpRequest;
        };
      } catch (_error) {
        e = _error;
        msxml = ["MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
        for (_i = 0, _len = msxml.length; _i < _len; _i++) {
          type = msxml[_i];
          try {
            http = new ActiveXObject(type);
            getXHR = function() {
              return http;
            };
            break;
          } catch (_error) {
            e = _error;
          }
        }
        return http;
      }
    };
    return function(method, uri, callback, postData) {
      var http;
      http = getXHR();
      http.open(method, uri, true);
      handleReadyState(http, callback);
      http.send(postData || null);
      return http;
    };
  })();

  Function.prototype.method = function(name, fn) {
    return this.prototype[name] = fn;
  };

  if (!Array.prototype.forEach) {
    Array.method("forEach", function(fn, thisObj) {
      var i, item, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        item = this[i];
        _results.push(fn.call(thisObj || window, item, i, this));
      }
      return _results;
    });
  }

  if (!Array.prototype.filter) {
    Array.method("filter", function(fn, thisObj) {
      var i, item, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        item = this[i];
        if (!fn.call(thisObj || window, item, i, this)) {
          continue;
        }
        _results.push(item);
      }
      return _results;
    });
  }

  if (!DED) {
    DED = {};
  }

  if (!util) {
    util = {};
  }

  DED.util.Observer = (function() {
    function Observer() {
      this.fns = [];
    }

    Observer.prototype.subscribe = function(fn) {
      return this.fns.push(fn);
    };

    Observer.prototype.unsubscribe = function(fn) {
      return this.fns = this.fns.filter(function(el) {
        if (fn !== el) {
          return el;
        }
      });
    };

    Observer.prototype.fire = function(o) {
      return this.fns.forEach(function(el) {
        return el(o);
      });
    };

    return Observer;

  })();

  DED.Queue = (function() {
    function Queue() {
      this.queue = [];
      this.onComplate = new DED.util.Observer;
      this.onFailture = new DED.util.Observer;
      this.onFlush = new DED.util.Observer;
      this.retryCount = 3;
      this.currentRetry = 0;
      this.paused = false;
      this.timeout = 5000;
      this.conn = {};
      this.timer = {};
    }

    DED.Queue.method("flush", function() {
      var abort, callback;
      if (!this.queue.length) {
        return;
      }
      if (this.paused) {
        this.paused = false;
      }
      this.currentRetry++;
      abort = (function(_this) {
        return function() {
          _this.conn.abort();
          if (_this.currentRetry === _this.retryCount) {
            return _this.onFailture.fire() && (_this.currentRetry = 0);
          } else {
            return _this.flush();
          }
        };
      })(this);
      this.timer = window.setTimeout(abort, this.timeout);
      callback = (function(_this) {
        return function(o) {
          window.clearTimeout(_this.timer);
          _this.currentRetry = 0;
          _this.queue.shift();
          _this.onFlush.fire(o.responseText);
          if (!_this.queue.length) {
            _this.onComplate.fire();
          }
          return _this.flush();
        };
      })(this);
      return this.conn = asyncRequest(this.queue[0].method, this.queue[0].uri, callback, this.queue[0].params);
    }).method("setRetryCount", function(count) {
      return this.retryCount = count;
    }).method("setTimeout", function(time) {
      return this.timeout = time;
    }).method("add", function(o) {
      return this.queue.push(o);
    }).method("pause", function() {
      return this.paused = true;
    }).method("dequeue", function() {
      return this.queue.pop();
    }).method("clear", function() {
      return this.queue = [];
    });

    return Queue;

  })();

  q = new DED.Queue;

  q.setRetryCount(5);

  q.setTimeout(1000);

  q.add({
    method: "GET",
    uri: "/path/to/file/php?ajax=true"
  });

  q.add({
    method: "GET",
    uri: "/path/to/file.php?ajax=true&woe=me"
  });

  q.flush();

  q.pause();

  q.clear();

  q.add({
    method: "GET",
    uri: "/path/to/file.php?ajax=true"
  });

  q.add({
    method: "GET",
    uri: "/path/to/file.php?ajax=true&woe=me"
  });

  q.dequeue();

  q.flush();

}).call(this);
